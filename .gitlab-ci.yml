image: $CI_REGISTRY_IMAGE

variables:
  LC_ALL: "en_US.UTF-8"
  LANG: "en_US.UTF-8"
  GIT_STRATEGY: clone
  CHANGE_LOG_PATH: "${CI_PROJECT_DIR}/fastlane/metadata/android/en-US/changelogs/"
  SIGN_KEY_NAME: "release.jks"
  SIGN_KEY_PATH: "${CI_PROJECT_DIR}/${SIGN_KEY_NAME}"
  GCM_KEY_PATH: "${CI_PROJECT_DIR}/gcm_key.json"
  BUILD_PROPERTIES_PATH: "${CI_PROJECT_DIR}/config/build.properties"
  SIGN_PROPERTIES_PATH: "${CI_PROJECT_DIR}/config/sign.properties"
  MOBILE_APK_PATH: "${CI_PROJECT_DIR}/mobile/build/outputs/apk/google/release/mobile-google-release.apk"
  TV_APK_PATH: "${CI_PROJECT_DIR}/tv/build/outputs/apk/google/release/tv-google-release.apk"

stages:
  - Test
  - Deploy

#Upload to play store
UploadToPlayStoreInternalChannel:
  stage: Deploy
  when: manual
  extends:
    - ".signUpdateBuildNumber"
  script:
    - echo "VERSION_CODE=$VERSION_CODE" >> build.env
    - echo "VERSION_NAME=$VERSION_NAME" >> build.env
    - export DIRECTORY=${VERSION_NAME}
    - fastlane publishToInternal

  artifacts:
    reports:
      dotenv: build.env

#Upload binaries to nexus private channel.
UploadToNexusPrivate:
  stage: Deploy
  when: on_success
  dependencies:
    - UploadToPlayStoreInternalChannel
  needs:
    - UploadToPlayStoreInternalChannel
  extends:
    - ".signKeepBuildNumber"
  script:
    - echo "VERSION_CODE=$VERSION_CODE" >> build.env
    - echo "VERSION_NAME=$VERSION_NAME" >> build.env
    - export DIRECTORY=${VERSION_NAME}
    - fastlane buildReleaseApk
    - curl --retry 5 --show-error --fail -u "${NEXUS_USERNAME}:${NEXUS_PASSWORD}" --cacert config/cacert.pem --upload-file ${MOBILE_APK_PATH} "${NEXUS_SERVER_PRIVATE}${DIRECTORY}/windscribe-mobile.apk"
    - curl --retry 5 --show-error --fail -u "${NEXUS_USERNAME}:${NEXUS_PASSWORD}" --cacert config/cacert.pem --upload-file ${TV_APK_PATH} "${NEXUS_SERVER_PRIVATE}${DIRECTORY}/windscribe-tv.apk"

#Upload binaries to nexus public channel.
UploadToNexusPublic:
  stage: Deploy
  extends:
    - ".signKeepBuildNumber"
  only:
    - tags
  except:
    - branches
  script:
    - if [ "$DEV" == "true" ]; then NEXUS_SERVER=$NEXUS_SERVER_PRIVATE; fi
    - echo "VERSION_CODE=$VERSION_CODE" >> build.env
    - echo "VERSION_NAME=$VERSION_NAME" >> build.env
    - export DIRECTORY=${VERSION_NAME}
    - echo $NEXUS_SERVER
    - fastlane buildReleaseApk
    - curl --retry 5 --show-error --fail -u "${NEXUS_USERNAME}:${NEXUS_PASSWORD}" --cacert config/cacert.pem --upload-file ${MOBILE_APK_PATH} "${NEXUS_SERVER}${DIRECTORY}/windscribe-mobile.apk"
    - curl --retry 5 --show-error --fail -u "${NEXUS_USERNAME}:${NEXUS_PASSWORD}" --cacert config/cacert.pem --upload-file ${TV_APK_PATH} "${NEXUS_SERVER}${DIRECTORY}/windscribe-tv.apk"

  artifacts:
    reports:
      dotenv: build.env

# update build number.
".signUpdateBuildNumber":
  stage: Deploy
  before_script:
    - apk -U upgrade
    - apk --no-cache add curl
    - apk add patch
    - apk add flock
    - apk --no-cache add git make musl-dev build-base cmake ninja zip unzip git perl
    - apk --no-cache add go=1.21.10-r0 --repository=http://dl-cdn.alpinelinux.org/alpine/v3.19/community
    - apk add jq
    - authToken=$(curl -X POST https://pki.int.windscribe.com:8200/v1/auth/approle/login -d "role_id=$role_id&secret_id=$secret_id" | jq       --raw-output '.auth.client_token')
    - secretData=$(curl -H "X-Vault-Token:$authToken" -X GET https://pki.int.windscribe.com:8200/v1/kv/cicd/client-android)
    - signProperties=$(echo "$secretData" | jq '.data."sign.properties"')
    - echo "$signProperties" | base64 -d -i > $SIGN_PROPERTIES_PATH
    - buildProperties=$(echo "$secretData" | jq '.data."build.properties"')
    - echo "$buildProperties" | base64 -d -i > $BUILD_PROPERTIES_PATH
    - uploadKey=$(echo "$secretData" | jq '.data.android_play_store_upload_key')
    - echo "$uploadKey" | base64 -d -i > $GCM_KEY_PATH
    - signKey=$(echo "$secretData" | jq '.data.android_play_store_sign_key')
    - echo "$signKey" | base64 -d -i > $SIGN_KEY_PATH
    - export GRADLE_USER_HOME=$(pwd)/.gradle
    - chmod +x ./gradlew
    - extras ndk -n 23.2.8568313 -c 3.22.1
    - extras fastlane
    - apk --no-cache add swig
    - fastlane updateBuildVersion
    - export VERSION_CODE=$(grep -E "versionCode" mobile/build.gradle | cut -d '"' -f2
      | tr -d '"' | tr -d 'versionCode ')
    - export VERSION_NAME=${MAJOR}.${MINOR}.${VERSION_CODE}
    - touch ${CHANGE_LOG_PATH}${VERSION_CODE}.txt
    - export ANDROID_NDK=$(ls -d $ANDROID_SDK_ROOT/ndk/*/ | head -n 1)

# update build version to same as play store.
".signKeepBuildNumber":
  stage: Deploy
  before_script:
    - apk -U upgrade
    - apk --no-cache add curl
    - apk add flock
    - apk --no-cache add git make musl-dev build-base cmake ninja zip unzip git perl
    - apk --no-cache add go=1.21.10-r0 --repository=http://dl-cdn.alpinelinux.org/alpine/v3.19/community
    - apk add jq
    - authToken=$(curl -X POST https://pki.int.windscribe.com:8200/v1/auth/approle/login -d "role_id=$role_id&secret_id=$secret_id" | jq       --raw-output '.auth.client_token')
    - secretData=$(curl -H "X-Vault-Token:$authToken" -X GET https://pki.int.windscribe.com:8200/v1/kv/cicd/client-android)
    - signProperties=$(echo "$secretData" | jq '.data."sign.properties"')
    - echo "$signProperties" | base64 -d -i > $SIGN_PROPERTIES_PATH
    - buildProperties=$(echo "$secretData" | jq '.data."build.properties"')
    - echo "$buildProperties" | base64 -d -i > $BUILD_PROPERTIES_PATH
    - uploadKey=$(echo "$secretData" | jq '.data.android_play_store_upload_key')
    - echo "$uploadKey" | base64 -d -i > $GCM_KEY_PATH
    - signKey=$(echo "$secretData" | jq '.data.android_play_store_sign_key')
    - echo "$signKey" | base64 -d -i > $SIGN_KEY_PATH
    - export GRADLE_USER_HOME=$(pwd)/.gradle
    - chmod +x ./gradlew
    - extras ndk -n 23.2.8568313 -c 3.22.1
    - extras fastlane
    - apk --no-cache add swig
    - fastlane keepBuildVersion
    - export VERSION_CODE=$(grep -E "versionCode" mobile/build.gradle | cut -d '"' -f2
      | tr -d '"' | tr -d 'versionCode ')
    - export VERSION_NAME=${MAJOR}.${MINOR}.${VERSION_CODE}
    - touch ${CHANGE_LOG_PATH}${VERSION_CODE}.txt
    - export ANDROID_NDK=$(ls -d $ANDROID_SDK_ROOT/ndk/*/ | head -n 1)


Slack:
  stage: Deploy
  when: on_success
  dependencies:
    - UploadToNexusPrivate
  needs:
    - UploadToNexusPrivate
  extends:
    - ".curl"
  script:
    - export TITLE="Available on play store Release $VERSION_NAME"
    - export CHANGE_LOG=$(cat $CHANGE_LOG_PATH${VERSION_CODE}.txt)
    - export SPACE=$'\n\n'
    - export MESSAGE=$TITLE$SPACE$CHANGE_LOG
    - export PAYLOAD={\"text\":\"$MESSAGE\"}
    - curl --retry 5 -X POST $SLACK_URL --show-error --fail -d "$PAYLOAD"

".curl":
  stage: Deploy
  before_script:
    - extras fastlane
    - apk --no-cache add curl

BuildStrongswan:
  stage: Deploy
  image: ubuntu:22.04  # âœ… Use Ubuntu LTS

  before_script:
    - apt-get update
    - DEBIAN_FRONTEND=noninteractive apt-get install -y locales build-essential automake bison flex gettext gperf libtool pkg-config swig jq curl zip unzip tar cmake git perl golang-go ninja-build openjdk-17-jdk wget zlib1g-dev
    # Set env vars
    - locale-gen en_US.UTF-8
    - export LANG=en_US.UTF-8
    - export LC_ALL=en_US.UTF-8
    - export ROOT_DIR=$(pwd)
    - export GRADLE_USER_HOME=$(pwd)/.gradle
    - export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
    - export PATH=$JAVA_HOME/bin:$PATH

    # Create Android SDK dir
    - mkdir -p /opt/android-sdk/cmdline-tools
    - cd /opt/android-sdk
    - wget https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -O tools.zip
    - unzip tools.zip -d cmdline-tools
    - mv cmdline-tools/cmdline-tools cmdline-tools/latest
    - export ANDROID_SDK_ROOT=/opt/android-sdk
    - export ANDROID_HOME=$ANDROID_SDK_ROOT
    - export PATH=$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/platform-tools:$PATH

    # Accept licenses & install SDK/NDK
    - echo "ðŸ“¦ Checking if sdkmanager works..."
    - which sdkmanager
    - sdkmanager --version
    - sdkmanager --list
    - yes | sdkmanager --licenses || true
    - sdkmanager --sdk_root=$ANDROID_SDK_ROOT "platform-tools" "platforms;android-34" "build-tools;34.0.0" "ndk;23.2.8568313"

    # Set NDK env var
    - export ANDROID_NDK_HOME=$ANDROID_SDK_ROOT/ndk/23.2.8568313
    - export ANDROID_NDK_ROOT=$ANDROID_SDK_ROOT/ndk/23.2.8568313

    # Build OpenSSL
    - mkdir -p /tmp/openssl-src && cd /tmp/openssl-src
    - wget https://github.com/openssl/openssl/archive/refs/tags/OpenSSL_1_1_1t.tar.gz
    - tar -xzf OpenSSL_1_1_1t.tar.gz
    - export OPENSSL_SRC="$PWD/openssl-OpenSSL_1_1_1t"

  script:
    - cd $CI_PROJECT_DIR
    - rm -rf strongswan-src
    - git clone --branch android-2.5.5 https://github.com/strongswan/strongswan.git strongswan-src
    - cp -a "$OPENSSL_SRC/." "$CI_PROJECT_DIR/strongswan-src/src/frontends/android/openssl/"
    - export strongswanLibsSrc="$PWD/strongswan-src/src/frontends/android/app/src/main/libs/*"
    - export strongswanLibsDst="$PWD/strongswan/libs"
    - export OUT_DIR="$PWD/strongswan-src/src/frontends/android/app/src/main/jni/openssl"
    - cd $CI_PROJECT_DIR/strongswan-src/src/frontends/android/openssl
    - ./compile.sh
    - echo "LOCAL_PATH := \$(call my-dir)" >"${OUT_DIR}/Android.mk"
    - echo "include \$(CLEAR_VARS)" >>"${OUT_DIR}/Android.mk"
    - echo "LOCAL_MODULE := libcrypto_static" >>"${OUT_DIR}/Android.mk"
    - echo "LOCAL_SRC_FILES := \$(TARGET_ARCH_ABI)/libcrypto.a" >>"${OUT_DIR}/Android.mk"
    - echo "LOCAL_EXPORT_C_INCLUDES := \$(LOCAL_PATH)/include" >>"${OUT_DIR}/Android.mk"
    - echo "include \$(PREBUILT_STATIC_LIBRARY)" >>"${OUT_DIR}/Android.mk"
    - cd $CI_PROJECT_DIR/strongswan-src
    - ./autogen.sh > config.log
    - ./configure --disable-defaults > config.log
    - make dist -j $(nproc) > config.log
    - rm config.log
    - popd
    - cd $CI_PROJECT_DIR
    - cd strongswan-src/src/frontends/android
    - sed -i 's|ndkVersion ".*"|ndkVersion "23.2.8568313"|g' app/build.gradle
    - ./gradlew assembleRelease
  artifacts:
    paths:
      - $CI_PROJECT_DIR/strongswan-src/src/frontends/android
    expire_in: 1 week
